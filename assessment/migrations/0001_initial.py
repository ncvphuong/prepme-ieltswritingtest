# Generated by Django 5.2.3 on 2025-06-20 00:48

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('practice', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('retry', 'Retry Required')], default='pending', max_length=20)),
                ('overall_band_score', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('9.0'))])),
                ('task_achievement_score', models.DecimalField(blank=True, decimal_places=1, help_text='Task Achievement (Task 1) / Task Response (Task 2)', max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('9.0'))])),
                ('coherence_cohesion_score', models.DecimalField(blank=True, decimal_places=1, help_text='Coherence and Cohesion', max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('9.0'))])),
                ('lexical_resource_score', models.DecimalField(blank=True, decimal_places=1, help_text='Lexical Resource', max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('9.0'))])),
                ('grammar_accuracy_score', models.DecimalField(blank=True, decimal_places=1, help_text='Grammatical Range and Accuracy', max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('9.0'))])),
                ('ai_model_used', models.CharField(blank=True, help_text='Claude model version used for assessment', max_length=100)),
                ('processing_time_seconds', models.PositiveIntegerField(blank=True, help_text='Time taken for AI processing', null=True)),
                ('ai_confidence_score', models.DecimalField(blank=True, decimal_places=2, help_text='AI confidence in the assessment (0.00-1.00)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))])),
                ('error_message', models.TextField(blank=True, help_text='Error details if assessment failed')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of assessment retry attempts')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='assessment', to='practice.submission')),
            ],
            options={
                'db_table': 'assessment_assessment',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='queued', max_length=20)),
                ('priority', models.IntegerField(default=0, help_text='Higher numbers = higher priority')),
                ('processing_started_at', models.DateTimeField(blank=True, null=True)),
                ('processing_completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_details', models.TextField(blank=True, help_text='Error details if processing failed')),
                ('retry_after', models.DateTimeField(blank=True, help_text='When to retry if failed', null=True)),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requests', to='assessment.assessment')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_requests', to='practice.submission')),
            ],
            options={
                'db_table': 'assessment_request',
                'ordering': ['-priority', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('feedback_type', models.CharField(choices=[('overall', 'Overall Feedback'), ('task_achievement', 'Task Achievement'), ('coherence_cohesion', 'Coherence and Cohesion'), ('lexical_resource', 'Lexical Resource'), ('grammar_accuracy', 'Grammatical Range and Accuracy'), ('inline', 'Inline Comment'), ('suggestion', 'Improvement Suggestion')], default='overall', max_length=20)),
                ('severity', models.CharField(choices=[('info', 'Information'), ('suggestion', 'Suggestion'), ('warning', 'Warning'), ('error', 'Error')], default='info', max_length=10)),
                ('title', models.CharField(help_text='Brief title for the feedback point', max_length=200)),
                ('content', models.TextField(help_text='Detailed feedback explanation')),
                ('text_start_position', models.PositiveIntegerField(blank=True, help_text='Character position where comment applies (start)', null=True)),
                ('text_end_position', models.PositiveIntegerField(blank=True, help_text='Character position where comment applies (end)', null=True)),
                ('highlighted_text', models.TextField(blank=True, help_text='Specific text that this feedback refers to')),
                ('suggestion', models.TextField(blank=True, help_text='Specific suggestion for improvement')),
                ('ai_confidence', models.DecimalField(blank=True, decimal_places=2, help_text='AI confidence in this feedback (0.00-1.00)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))])),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback_items', to='assessment.assessment')),
            ],
            options={
                'db_table': 'assessment_feedback',
                'ordering': ['feedback_type', 'text_start_position', 'created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['status'], name='assessment__status_1ffc5e_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['overall_band_score'], name='assessment__overall_3413ac_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['created_at'], name='assessment__created_8d828a_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentrequest',
            index=models.Index(fields=['status'], name='assessment__status_89c357_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentrequest',
            index=models.Index(fields=['priority', 'created_at'], name='assessment__priorit_e2eaf0_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentrequest',
            index=models.Index(fields=['processing_started_at'], name='assessment__process_029fdb_idx'),
        ),
        migrations.AddIndex(
            model_name='feedback',
            index=models.Index(fields=['feedback_type'], name='assessment__feedbac_43a47b_idx'),
        ),
        migrations.AddIndex(
            model_name='feedback',
            index=models.Index(fields=['severity'], name='assessment__severit_d78203_idx'),
        ),
        migrations.AddIndex(
            model_name='feedback',
            index=models.Index(fields=['assessment', 'feedback_type'], name='assessment__assessm_7c1fcf_idx'),
        ),
    ]
